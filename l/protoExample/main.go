package main

import (
	"fmt"
	"log"

	"google.golang.org/protobuf/proto"
)

// Steps for protocol buffer
// 1. sudo apt-get install protobuf-compiler
// 2. go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
// 3. Define the .proto File
// The line option go_package = "./;main"; is the key. It tells the protoc tool to generate a Go file for the main package, and save it in the current directory (./). This pr// events the ambiguity that caused the previous error.
// 4. Compile Proto File : protoc --go_out=. --go_opt=paths=source_relative person.proto
// 5. Ananlyze proto and main.go file
// 6. Run main.go
func main() {
	// Create a new Person message using the struct generated by protoc.
	person := &Person{
		Name:  "Alice Wonderland",
		Id:    1234,
		Email: "alice@example.com",
		Phones: []*Person_PhoneNumber{ // Create a slice of PhoneNumber pointers
			{Number: "111-222-3333", Type: Person_MOBILE},
			{Number: "999-888-7777", Type: Person_WORK},
		},
	}

	fmt.Println("Original Person message:")
	// The %+v verb prints the struct with field names, great for debugging.
	fmt.Printf("%+v\n", person)

	// --- Serialization (Marshaling) ---
	// Convert the Person message to a byte slice (Protobuf binary format)
	data, err := proto.Marshal(person)
	if err != nil {
		log.Fatalf("marshaling error: %v", err)
	}

	fmt.Printf("\nMarshaled data (bytes): %x\n", data)
	fmt.Printf("Marshaled data size: %d bytes\n", len(data))

	// --- Deserialization (Unmarshaling) ---
	// Create an empty Person message to unmarshal the data into
	newPerson := &Person{}

	// Unmarshal the byte slice back into the newPerson message
	err = proto.Unmarshal(data, newPerson)
	if err != nil {
		log.Fatalf("unmarshaling error: %v", err)
	}

	fmt.Println("\nUnmarshaled Person message:")
	fmt.Printf("%+v\n", newPerson)

	// Verify that the data was correctly serialized and deserialized.
	if person.GetName() == newPerson.GetName() &&
		person.GetId() == newPerson.GetId() &&
		person.GetEmail() == newPerson.GetEmail() {
		fmt.Println("\nSerialization and deserialization successful! Data matches.")
	} else {
		fmt.Println("\nError: Data mismatch after serialization/deserialization.")
	}
}
